{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://michalgala.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://michalgala.github.io/blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Optimisation de requêtes MySQL par indexation - Partie 2",
            "content": "Optimisation de requêtes MySQL par indexation - Partie 2 . Dans cette seconde partie, nous allons voir l’importance des moteurs de stockage dans l’indexation, la spécificité de leur architecture, et leurs cas d’usage. . Nous allons étudier les deux principaux moteurs de stockage (storage engine), MyISAM et InnoDb, ainsi que trois méthodes d’indexation (B-tree, B+tree et Hash). . Méthodes d’indexation . Pour comprendre les méthodes d’indexation, introduisons le concept d’ordre physique et logique. L’ordre physique est l’ordre de la variable que l’on observe dans la table, et l’ordre logique celui l’ordre enregistrée dans une table qui référence chacun des index de la table disponible pour l’utilisateur. Dans le diagramme ci-dessous, chaque index (Col1) de la table MySQL est présent dans une table ordonnée pointant vers la table MySQL (grâce au pointeur qui correspond à l’“adresse” de la ligne). . . Les méthodes d’indexation utilisent cette logique. Nous allons étudier les trois principales: B-tree, B+tree et Hash. . B-tree . La méthode B-tree permet d’avoir un index désordonné dans la table Mysql, comme c’est le cas dans l’illustration au dessus. Dans les sous-tables (feuilles) créées par la méthodes, les index sont ordonnés, et pointent vers les lignes de la table visible. Un niveau supplémentaire (nœud interne) pointe vers les feuilles (nœud final), la valeur de l’index de ce niveau correspond au dernier index (maximum dans le cas numérique) de chaque feuille. Avec cette architecture, MySQL peut rapidement trouver l’adresse de la/les lignes demandée(s) par l’utilisateur. . . Exemple: . l’utilisateur recherche la valeur 34 à partir d’une requête | Le nœud interne ne contient pas la valeur recherchée, mais indique à MySQL de rechercher la valeur dans le second nœud (34 se situant entre 28 et 72) | Une fois la valeur trouvée après le parcours de l’arbre, la ligne de la table est renvoyée à partir de son adresse (pointeur) | . :warning: Si la clé n’est pas unique, ou que utilisateur requête une fourchette de valeurs (RANGE), l’algorithme doit parcourir toute la feuille (nœud final) pour s’assurer de trouver toutes les occurrences. Il doit par ailleurs reparcourir l’arbre si l’index “déborde” sur plusieurs feuilles. Plus une clé non-unique comporte de valeurs répétés, plus l’exécution risque d’être longue. De même pour les RANGE, l’exécution sera d’autant plus lente que plus la fourchette de valeurs est large. . B+tree . Dans la méthode B+tree, les index sont ordonnées dans la table visible de l’utilisateur. Par ailleurs, les feuilles sont connectées entre elles, et chacune pointe vers la suivante. S’affranchissant du besoin de reparcourir l’arbre, cette méthode est donc plus efficace pour la recherche d’une fourchette de valeurs, ou d’un index non-unique. . . :grey_exclamation:A la différence de la méthode B-tree, il n’y a pas de données enregistrées dans le nœud interne (branche). Le parcours peut donc être plus long pour la recherche d’une observation particulière, puisqu’il faut atteindre la nœud final pour obtenir l’adresse de la ligne. . Hash . Dans cette méthode, c’est une fonction de hashing qui donne l’adresse de la ligne (pointeur). L’adresse de la ligne est donc simplement obtenue en passant la valeur recherchée par la fonction, dont le résultat sera l’adresse (pointeur) de la ligne. Cette méthode est très efficace pour la recherche d’une observation particulière. Elle est en revanche très limité pour une fourchette de valeurs, qui consiste en de multiples recherches individuelles, les résultats des fonctions de hasing étant aléatoires et non ordinales. . Moteurs de stockage . MySQL intègre plusieurs moteurs de stockage. Les deux principaux sont MyISAM, InnoDB. Chacun de ces moteurs dispose de sa propre implémentation des méthode d’indexation. . MyISAM . MyISAM utilise la structure B-tree pour les clés primaires, les clés uniques, ainsi que les index secondaires. Pour les index secondaires, un pointeur vers la clé primaire est enregistré (id ligne recherchée). . :warning: Les index sont gérés en mémoire, il est important que le paramètre key_buffer_size soit bien défini (sujet non traité dans cet article) . InnoDB . Le moteur InnoDB utilise la méthode B+tree pour la clé primaire. Pour les clés secondaires, c’est la méthode B-tree qui est utilisée. A la différence de MyISAM, la clé primaire et non son pointeur est enregistrée avec la clé secondaire. . :grey_exclamation: Le pointeur étant enregistré avec la clé secondaire dans MyISAM, il n’est pas nécessaire de reparcourir un arbre pour retrouver la ligne à renvoyer, contrairement à InnoDB. . :warning: Plus la valeur de la clé primaire est grande, plus la feuille prendra d’espace sur le disque. . :warning: InnoDB peut décider d’utiliser la méthode Hash pour la gestion des index. Voir la configuration de la variable innodb_adaptive_hash_index. .",
            "url": "https://michalgala.github.io/blog/markdown/2019/06/07/SQL-Optimisation-partie2.html",
            "relUrl": "/markdown/2019/06/07/SQL-Optimisation-partie2.html",
            "date": " • Jun 7, 2019"
        }
        
    
  
    
        ,"post3": {
            "title": "Optimisation de requêtes MySQL par indexation - Partie 1",
            "content": "Optimisation de requêtes MySQL par indexation - Partie 1 . L’indexation de variables est le principal levier d’amélioration de la performance des requêtes SQL. Dans cette série d’article nous allons présenter l’utilité des index, leur utilisation par MySQL pour l’exécution de requêtes, et leurs implications sur la performance. . Dans cette première partie, à l’aide de la fonction EXPLAIN, nous allons voir comment MySQL exécute une requête, et étudier l’impact des index sur leur vitesse d’exécution. . Données . Les données utilisées sont issues du playground Kaggle “predict future sales”, auxquelles j’ai rajouté une clé unique auto-incrémentée pour les tables sans identifiant unique de ligne. . Debug de requêtes . MySQL utilise les index pour optimiser de nombreuses opérations: les requêtes simples, les jointures, les tris, les groupements et agrégations. . En l’absence d’index, l’optimiseur parcourt toute la colonne à la recherche du critère indiqué dans la requête. Prenons l’exemple d’une requête basée sur la variable ‘index’ (clé primaire et donc index de la table sales_train), et de la variable item_id (simple colonne de la table, non indexée). . SELECT * FROM sales_train WHERE `index` = 2000000 SELECT * FROM sales_train WHERE item_id = 22169 . La première requête s’exécute quasi-instantanément (4ms), et la seconde 225 fois plus longtemps (900ms). Mysql donne la possibilité d’étudier le schéma d’exécution grâce à la fonction EXPLAIN, à ajouter en préfixe de la requête. . EXPLAIN SELECT * FROM sales_train WHERE `index` = 2000000 EXPLAIN SELECT * FROM sales_train WHERE item_id = 22169 .   table type possible_keys key rows . 1ère requête | sales_train | const | PRIMARY | PRIMARY | 1 | . 2de requête | sales_train | ALL | NULL | NULL | 2722275 | . Chaque requête précédée d’EXPLAIN, renvoie une table dont les colonnes qui nous concernent sont présentées dans le tableau ci-dessus. . Colonne rows: On y voit que la première requête examine 1 seule ligne, alors que la seconde parcourt toute la table, à savoir les 2 722 275 lignes correspondant au nombre total d’observations. (note: la requête n’étant pas exécutée, il s’agit en réalité d’approximations) | Colonnes key: On peut voir que la seconde requête n’utilise pas d’index pour son exécution, contrairement à la première | Colonne type: ALL dans cette colonne, et NULL dans la colonne key nous indique un scan de toute la table | . Optimisation par l’ajout d’index . Requête simple . -- Dupliquer la table et ajouter indexer item_id CREATE TABLE sales_train_test LIKE sales_train; INSERT INTO sales_train_test SELECT * FROM sales_train; ALTER TABLE sales_train_test ADD INDEX `item_id` (`item_id`); -- Requête SELECT * FROM sales_train_test WHERE item_id = 22169; EXPLAIN SELECT * FROM sales_train_test WHERE item_id = 22169; . Dans le premier bloc requête, une nouvelle table ‘sales_train_test’ est créée à partir de la table utilisée précédemment, et la variable ‘item_id’ y est indexée. Enfin, nous exécutons la même requête que dans la partie précédente, et nous voyons que cette fois-ci la requête s’exécute en 6ms (contre 900ms auparavant). .   table type possible_keys key rows . Sans index | sales_train | ALL | NULL | NULL | 2722275 | . Avec index | sales_train_test | ref | item_id | item_id | 1 | . La fonction EXPLAIN nous indique que l’optimiseur prend bien en compte l’index pour exécuter la requête, qui ne parcourt plus toutes les lignes à la recherche du critère. . :warning: L’ajout d’index n’améliore pas systématiquement la performance d’une requête. Nous en expliquerons les raisons dans les parties suivantes. . Jointure . Nous allons tester 3 cas de jointures. Le premier avec ‘item_id’ indexé dans les deux tables, le second dans une seule des deux tables, et enfin sans que la variable ne soit indexée. Le tableau ci dessous est le résultat de la fonction EXPLAIN, ainsi que le temps d’exécution pour un INNER JOIN des tables ‘sales_train’ (T1) et ‘items’ (T2) avec et sans index pour la variable de jointure ‘item_id’ .   Temps type key rows . T1_indexT2_index | 7ms | refALL | item_idNULL | 12422 418 | . T1_noindexT2_index | 8ms | ALLeq_ref | NULLPRIMARY | 2 722 2751 | . T1_indexT2_noindex | 7ms | refALL | item_idNULL | 12421 432 | . T1_noindexT2_noindex | 258ms | ALLALL | NULLNULL | 2 722 27521 432 | . On observe qu’en l’absence d’index la requête met près de 40 fois plus de temps à s’exécuter. . Tri, groupements, agrégations . L’utilisation d’index se révèle particulièrement efficace pour les opérations de tri et de groupement (qui trient les données afin de pouvoir former les groupes). Nous pouvons voir dans le tableau produit par la fonction EXPLAIN, que l’utilisation de l’index est beaucoup plus efficace que l’utilisation d’une table temporaire pour grouper les données, qui par ailleurs est enregistrée sur le disque si elle ne peut être contenue en mémoire (colonne Extra)1 . -- Table originale SELECT item_id, count(*) FROM sales_train GROUP BY item_id EXPLAIN SELECT ... -- Table avec item_id en index SELECT item_id, count(*) FROM sales_train_test GROUP BY item_id EXPLAIN SELECT ... .   type possible_keys key rows Extra . Sans index (1630ms) | ALL | NULL | NULL | 2722275 | Using temporaryUsing filesort | . Avec index (7ms) | ref | item_id | item_id | 1 | Using index | . :warning: Avoir un index en variable de regroupement/tri ne garantit pas son utilisation par l’optimiseur . http://s.petrunia.net/blog/?p=24 &#8617; . |",
            "url": "https://michalgala.github.io/blog/markdown/2019/06/06/OptimisationSQL-index-partie1.html",
            "relUrl": "/markdown/2019/06/06/OptimisationSQL-index-partie1.html",
            "date": " • Jun 6, 2019"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://michalgala.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://michalgala.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}